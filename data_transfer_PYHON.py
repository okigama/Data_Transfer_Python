# -*- coding: utf-8 -*-
"""projeto1_data-transfer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MhpUTXFZgpactIl9WY5blPxj6SDhsFzs

# CÃ³digo Transfer Learning com python
"""

import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from google.colab import drive
drive.mount('/content/drive')

"""#1 Carregar o MobileNetV2"""

base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape = (128, 128, 3))
base_model.trainable = False

"""#2 Adicionar as novas camadas"""

model = models.Sequential([
    base_model,
    layers.GlobalAveragePooling2D(),
    layers.Dense(128, activation='sigmoid'),
    layers.Dropout(0.5),
    layers.Dense(1, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

"""#3 Preparar as imagens"""

train_datagen = ImageDataGenerator(rescale = 1.0 / 255, validation_split=0.2)
train_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Meu_Dataset/train',
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary',
    subset='training'
)
val_generator = train_datagen.flow_from_directory(
    '/content/drive/MyDrive/Meu_Dataset/validation',
    target_size=(128, 128),
    batch_size=32,
    class_mode='binary',
    subset='validation'
)

"""#4 Treinar o modelo"""

history = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=10
)

"""#5 Avaliar o modelo"""

loss, accuracy = model.evaluate(val_generator)
print(f"Loss: {loss}, Accuracy: {accuracy}")